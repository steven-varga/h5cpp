* After

  Using the new C++ API, a simple record stream such as this:

  #+NAME: compound.h
  #+BEGIN_EXAMPLE
  /* We write this. */
  typedef struct s1_t {
    int    a_name;
    float  b_name;
    double c_name;
  } s1_t;

  /* ... and read this. */
  typedef struct s2_t {
    double c_name;
    int    a_name;
  } s2_t;
  #+END_EXAMPLE

  Can be written and read back as shown below.

** Writing Records

   *Tangle this!* (~C-u C-c C-v t~)

   #+BEGIN_SRC C++ :tangle record_writer.cpp :exports code :eval never
   #include "compound.h"
   #include <h5cpp/core>
   #include "generated1.h"
   #include <h5cpp/io>
   #include <algorithm>
   int
   main()
   {
     std::vector<s1_t> s1(10);

     std::generate( std::begin(s1), std::end(s1), [i=-1]() mutable {
         return s1_t{++i,static_cast<float>(i*i), 1.0/(i+1)}; 
       });

     auto fd = h5::create("after.h5", H5F_ACC_TRUNC);

     h5::write(fd, "ArrayOfStructures", s1);

     return 0;
   }
   #+END_SRC

   We need to go through ~clang~ and have a few extra moves:

   #+BEGIN_SRC shell :results output silent :exports both
   h5cpp record_writer.cpp -- -std=c++17 -I/usr/local/include \
         -I/usr/local/h5cpp-llvm -Dgenerated1.h
   g++ -std=c++17 -I/usr/local/include -I/usr/local/h5cpp-llvm \
       record_writer.cpp -lhdf5 -lz -ldl -lm -o record_writer
   ./record_writer
   #+END_SRC

   #+BEGIN_SRC shell :results output :exports both
   h5dump after.h5
   #+END_SRC

   *Tangle this!*

   #+BEGIN_SRC C++ :tangle record_reader.cpp :exports code :eval never
   #include "compound.h"
   #include <h5cpp/core>
   #include "generated2.h"
   #include <h5cpp/io>
   #include <iostream>

   int
   main()
   {
     auto fd = h5::open("after.h5", H5F_ACC_RDONLY, h5::default_fapl);

     auto data = h5::read< std::vector<s2_t> >(fd, "ArrayOfStructures");

     std::cout << "reading back data previously written:\n\t";
     for (auto r:data)
       std::cout << r.c_name << " ";
     std::cout << std::endl;

     return 0;
   }
   #+END_SRC

   Run that:

   #+BEGIN_SRC shell :results output :exports both
   h5cpp record_reader.cpp -- -std=c++17 -I/usr/local/include \
         -I/usr/local/h5cpp-llvm -Dgenerated2.h
   g++ -std=c++17 -I/usr/local/include -I/usr/local/h5cpp-llvm \
       record_reader.cpp -lhdf5 -lz -ldl -lm -o record_reader
   ./record_reader
   #+END_SRC
