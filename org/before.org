* Before

  Using the C-API, a simple record stream such as this:

  #+NAME: compound.h
  #+BEGIN_EXAMPLE
  /* We write this. */
  typedef struct s1_t {
    int    a_name;
    float  b_name;
    double c_name;
  } s1_t;

  /* ... and read this. */
  typedef struct s2_t {
    double c_name;
    int    a_name;
  } s2_t;
  #+END_EXAMPLE

  Can be written and read back as show below.

** Writing Records

   #+HEADERS: :includes '(<compound.h> <hdf5.h>) :flags "-I./" :libs "-lhdf5"
   #+BEGIN_SRC C :results output silent :exports both
   s1_t       s1[10];                       /* Buffer to be written */
   hid_t      file, s1_tid, space, dataset; /* Handles */
   hsize_t    dim[] = {10};                 /* Dataspace dimensions */
   size_t     i;

   /* Create the file. */
   file = H5Fcreate("before.h5", H5F_ACC_TRUNC, H5P_DEFAULT, H5P_DEFAULT);

   /* Create the memory data type. */
   s1_tid = H5Tcreate (H5T_COMPOUND, sizeof(s1_t));
   H5Tinsert(s1_tid, "a_name", HOFFSET(s1_t, a_name), H5T_STD_I32LE);
   H5Tinsert(s1_tid, "c_name", HOFFSET(s1_t, c_name), H5T_IEEE_F64LE);
   H5Tinsert(s1_tid, "b_name", HOFFSET(s1_t, b_name), H5T_IEEE_F32LE);
   /* Create the data space. */
   space = H5Screate_simple(1, dim, NULL);
   /* Create the dataset. */
   dataset = H5Dcreate2(file, "ArrayOfStructures", s1_tid, space,
                        H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);

   /* Write a few important values. */
   for (i = 0; i< 10; i++) {
     s1[i].a_name = i;
     s1[i].b_name = i*i;
     s1[i].c_name = 1./(i+1);
    }

   /* Write data to the dataset; */
   H5Dwrite(dataset, s1_tid, H5S_ALL, H5S_ALL, H5P_DEFAULT, s1);

   /*  Release resources */
   H5Dclose(dataset);
   H5Tclose(s1_tid);
   H5Sclose(space);
   H5Fclose(file);
   #+END_SRC

   #+BEGIN_SRC shell :results output :exports both
   h5dump before.h5
   #+END_SRC

** Reading Records

   #+HEADERS: :includes '(<compound.h> <hdf5.h>) :flags "-I./" :libs "-lhdf5"
   #+BEGIN_SRC C :results output :exports both
   s2_t       s2[10];                /* Read buffer */
   hid_t      file, s2_tid, dataset; /* Handles */
   size_t     i;

   /* Open the file. */
   file = H5Fopen("before.h5", H5F_ACC_RDONLY, H5P_DEFAULT);

   /* Open the dataset. */
   dataset = H5Dopen2(file, "ArrayOfStructures", H5P_DEFAULT);

   /* Construct the in-memory type */
   s2_tid = H5Tcreate (H5T_COMPOUND, sizeof(s2_t));
   H5Tinsert(s2_tid, "c_name", HOFFSET(s2_t, c_name), H5T_NATIVE_DOUBLE);
   H5Tinsert(s2_tid, "a_name", HOFFSET(s2_t, a_name), H5T_NATIVE_INT);

   /* Read it back */
   H5Dread(dataset, s2_tid, H5S_ALL, H5S_ALL, H5P_DEFAULT, s2);

   printf("reading back data previously written:\n\t");
   for (i = 0; i < 10; ++i)
     printf("%g ", s2[i].c_name);
   printf("\n");

   /*  Release resources */
   H5Tclose(s2_tid);
   H5Dclose(dataset);
   H5Fclose(file);
   #+END_SRC
