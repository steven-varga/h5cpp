
* Files

** Minimalistic file creation

   1. There are only two REQUIRED arguments: file name and access mode.
      File creation- and access property lists are optional.
   2. ~f5::fd_t~ is a managed resource. ~H5Fclose~ will be called upon leaving
      the code block.

   #+HEADERS: :includes <h5cpp/all> :flags "-std=c++17" :libs "-lhdf5"
   #+BEGIN_SRC C++ :results silent :exports code
   h5::fd_t fd = h5::create("000.h5", H5F_ACC_TRUNC);
   #+END_SRC

   #+BEGIN_SRC shell :results output :exports both
   h5dump -pBH 000.h5
   #+END_SRC

** File creation and access property lists

   1. Property lists can be daisy chained with the ~|~ operator.
   2. ~H5P_DEFAULT~ behavior can be achieved by explicitly specifying
      ~h5::default_[fcpl,fapl]~. NOTE: The default values are not assignable
      and will produce a compiler error.

   #+HEADERS: :includes <h5cpp/all> :flags "-std=c++17" :libs "-lhdf5"
   #+BEGIN_SRC C++ :results silent :exports code
   h5::fapl_t fapl = h5::libver_bounds{H5F_LIBVER_LATEST, H5F_LIBVER_LATEST};
   h5::fcpl_t fcpl = h5::file_space_page_size{8192} | h5::userblock{1024};
   h5::fd_t fd = h5::create("001.h5", H5F_ACC_TRUNC, fcpl, fapl);
   #+END_SRC

   #+BEGIN_SRC shell :results output :exports both
   h5dump -pBH 001.h5
   #+END_SRC

** ~auto~-mation

   1. The C++ ~auto~ specifier works just fine.
   2. To just create a file is OK also. The file is closed when ~h5::create~
      returns.
   
   #+HEADERS: :includes <h5cpp/all> :flags "-std=c++17" :libs "-lhdf5"
   #+BEGIN_SRC C++ :results silent :exports code
   auto fd = h5::create
      (
       "002.h5",
       H5F_ACC_TRUNC,
       h5::file_space_page_size{8192} | h5::userblock{1024},      // fcpl
       h5::libver_bounds{H5F_LIBVER_LATEST, H5F_LIBVER_LATEST} |
         h5::fclose_degree_weak | h5::fapl_core{2048,1}           // fapl
       );
   #+END_SRC

   #+BEGIN_SRC shell :results output :exports both
   h5dump -pBH 002.h5
   #+END_SRC

** C-API interop

   A static cast to ~hid_t~ is always allowed. The reference MUST be treated as
   managed reference, and one MUST NOT call ~H5Fclose~ on it.

   #+HEADERS: :includes '(<h5cpp/all> <cassert> <iostream>)
   #+HEADERS: :flags "-std=c++17" :libs "-lhdf5"
   #+BEGIN_SRC C++ :results output :exports both
   h5::fd_t fd = h5::open("001.h5", H5F_ACC_RDONLY);

   hid_t hnd = static_cast<hid_t>(fd);

   unsigned intent;
   assert(H5Fget_intent(hnd, &intent) >= 0 && intent == H5F_ACC_RDONLY);
   std::cout << "All good!\n";
   #+END_SRC
